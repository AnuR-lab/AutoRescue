AWSTemplateFormatVersion: '2010-09-09'
Description: 'AutoRescue Flight Assistant - Lambda Functions with AWS Secrets Manager Integration'

Resources:
  # ==========================================
  # Lambda Functions and IAM Roles
  # ==========================================
  
  # IAM Role for Search Flights Lambda
  SearchFlightsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AutoRescue-SearchFlights-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AmadeusAPIAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/AutoRescue-SearchFlights:*'
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:autorescue/amadeus/credentials-*'
      Tags:
        - Key: Application
          Value: AutoRescue
        - Key: Component
          Value: Lambda

  # IAM Role for Analyze Disruption Lambda
  AnalyzeDisruptionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AutoRescue-AnalyzeDisruption-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AmadeusAPIAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/AutoRescue-AnalyzeDisruption:*'
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:autorescue/amadeus/credentials-*'
      Tags:
        - Key: Application
          Value: AutoRescue
        - Key: Component
          Value: Lambda

  # Search Flights Lambda Function
  SearchFlightsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AutoRescue-SearchFlights
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt SearchFlightsLambdaRole.Arn
      Timeout: 30
      MemorySize: 256
      Code:
        ZipFile: |
          import json
          import os
          import boto3
          import urllib3
          from datetime import datetime, timedelta
          
          # Disable SSL warnings for development
          urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
          
          # Initialize AWS clients
          secretsmanager = boto3.client('secretsmanager')
          
          # Cache for credentials (1 hour)
          _secrets_cache = {}
          
          def get_amadeus_credentials():
              """Retrieve Amadeus credentials from AWS Secrets Manager with caching"""
              cache_key = 'amadeus_credentials'
              current_time = datetime.now()
              
              # Check cache (1 hour TTL)
              if cache_key in _secrets_cache:
                  cached_data, cached_time = _secrets_cache[cache_key]
                  if (current_time - cached_time).seconds < 3600:
                      return cached_data
              
              # Fetch from Secrets Manager
              try:
                  response = secretsmanager.get_secret_value(
                      SecretId='autorescue/amadeus/credentials'
                  )
                  credentials = json.loads(response['SecretString'])
                  
                  # Cache the credentials
                  _secrets_cache[cache_key] = (credentials, current_time)
                  
                  return credentials
              except Exception as e:
                  print(f"Error fetching credentials from Secrets Manager: {str(e)}")
                  raise
          
          def get_access_token():
              """Get Amadeus API access token using credentials from Secrets Manager"""
              credentials = get_amadeus_credentials()
              
              url = "https://test.api.amadeus.com/v1/security/oauth2/token"
              headers = {"Content-Type": "application/x-www-form-urlencoded"}
              data = {
                  "grant_type": "client_credentials",
                  "client_id": credentials['client_id'],
                  "client_secret": credentials['client_secret']
              }
              
              http = urllib3.PoolManager(cert_reqs='CERT_NONE')
              response = http.request(
                  'POST',
                  url,
                  fields=data,
                  headers=headers
              )
              
              result = json.loads(response.data.decode('utf-8'))
              return result.get('access_token')
          
          def search_flights(origin, destination, departure_date, adults=1):
              """Search for flights using Amadeus API"""
              access_token = get_access_token()
              
              url = f"https://test.api.amadeus.com/v2/shopping/flight-offers"
              headers = {"Authorization": f"Bearer {access_token}"}
              params = {
                  "originLocationCode": origin,
                  "destinationLocationCode": destination,
                  "departureDate": departure_date,
                  "adults": adults,
                  "max": 10
              }
              
              http = urllib3.PoolManager(cert_reqs='CERT_NONE')
              response = http.request(
                  'GET',
                  url,
                  fields=params,
                  headers=headers
              )
              
              return json.loads(response.data.decode('utf-8'))
          
          def lambda_handler(event, context):
              """Lambda handler for flight search"""
              try:
                  body = json.loads(event.get('body', '{}'))
                  
                  origin = body.get('origin')
                  destination = body.get('destination')
                  departure_date = body.get('departureDate')
                  adults = body.get('adults', 1)
                  
                  if not all([origin, destination, departure_date]):
                      return {
                          'statusCode': 400,
                          'body': json.dumps({'error': 'Missing required parameters'})
                      }
                  
                  result = search_flights(origin, destination, departure_date, adults)
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps(result)
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)})
                  }
      Tags:
        - Key: Application
          Value: AutoRescue
        - Key: Component
          Value: Lambda

  # Analyze Disruption Lambda Function
  AnalyzeDisruptionLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AutoRescue-AnalyzeDisruption
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt AnalyzeDisruptionLambdaRole.Arn
      Timeout: 30
      MemorySize: 256
      Code:
        ZipFile: |
          import json
          import os
          import boto3
          import urllib3
          from datetime import datetime, timedelta
          
          # Disable SSL warnings for development
          urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
          
          # Initialize AWS clients
          secretsmanager = boto3.client('secretsmanager')
          
          # Cache for credentials (1 hour)
          _secrets_cache = {}
          
          def get_amadeus_credentials():
              """Retrieve Amadeus credentials from AWS Secrets Manager with caching"""
              cache_key = 'amadeus_credentials'
              current_time = datetime.now()
              
              # Check cache (1 hour TTL)
              if cache_key in _secrets_cache:
                  cached_data, cached_time = _secrets_cache[cache_key]
                  if (current_time - cached_time).seconds < 3600:
                      return cached_data
              
              # Fetch from Secrets Manager
              try:
                  response = secretsmanager.get_secret_value(
                      SecretId='autorescue/amadeus/credentials'
                  )
                  credentials = json.loads(response['SecretString'])
                  
                  # Cache the credentials
                  _secrets_cache[cache_key] = (credentials, current_time)
                  
                  return credentials
              except Exception as e:
                  print(f"Error fetching credentials from Secrets Manager: {str(e)}")
                  raise
          
          def get_access_token():
              """Get Amadeus API access token using credentials from Secrets Manager"""
              credentials = get_amadeus_credentials()
              
              url = "https://test.api.amadeus.com/v1/security/oauth2/token"
              headers = {"Content-Type": "application/x-www-form-urlencoded"}
              data = {
                  "grant_type": "client_credentials",
                  "client_id": credentials['client_id'],
                  "client_secret": credentials['client_secret']
              }
              
              http = urllib3.PoolManager(cert_reqs='CERT_NONE')
              response = http.request(
                  'POST',
                  url,
                  fields=data,
                  headers=headers
              )
              
              result = json.loads(response.data.decode('utf-8'))
              return result.get('access_token')
          
          def analyze_disruption(flight_number, date, origin, destination):
              """Analyze flight disruption and find alternatives"""
              access_token = get_access_token()
              
              # Search for alternative flights
              url = f"https://test.api.amadeus.com/v2/shopping/flight-offers"
              headers = {"Authorization": f"Bearer {access_token}"}
              params = {
                  "originLocationCode": origin,
                  "destinationLocationCode": destination,
                  "departureDate": date,
                  "adults": 1,
                  "max": 10
              }
              
              http = urllib3.PoolManager(cert_reqs='CERT_NONE')
              response = http.request(
                  'GET',
                  url,
                  fields=params,
                  headers=headers
              )
              
              return json.loads(response.data.decode('utf-8'))
          
          def lambda_handler(event, context):
              """Lambda handler for disruption analysis"""
              try:
                  body = json.loads(event.get('body', '{}'))
                  
                  flight_number = body.get('flightNumber')
                  date = body.get('date')
                  origin = body.get('origin')
                  destination = body.get('destination')
                  
                  if not all([flight_number, date, origin, destination]):
                      return {
                          'statusCode': 400,
                          'body': json.dumps({'error': 'Missing required parameters'})
                      }
                  
                  result = analyze_disruption(flight_number, date, origin, destination)
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps(result)
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)})
                  }
      Tags:
        - Key: Application
          Value: AutoRescue
        - Key: Component
          Value: Lambda

Outputs:
  SearchFlightsLambdaArn:
    Description: ARN of the Search Flights Lambda Function
    Value: !GetAtt SearchFlightsLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SearchFlightsArn'
  
  AnalyzeDisruptionLambdaArn:
    Description: ARN of the Analyze Disruption Lambda Function
    Value: !GetAtt AnalyzeDisruptionLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AnalyzeDisruptionArn'
  
  SearchFlightsLambdaName:
    Description: Name of the Search Flights Lambda Function
    Value: !Ref SearchFlightsLambda
  
  AnalyzeDisruptionLambdaName:
    Description: Name of the Analyze Disruption Lambda Function
    Value: !Ref AnalyzeDisruptionLambda
